1 - Open pcap2.pcap with wireshark, use "http.request or http.response" as display filter.  Save kotehok.html and the 3 javascripts files it needs: gibberish-aes.js, pbkdf2.js and sha1.js locally.  Select either line-based text data (for html) or media type (for js files).  You may want to save kotehok.html as index.html to save some efforts later" 

2 - Serve the files locally using a web server, then point your web browser to the html page.  You should see a password input to enter the key and a textarea to enter plain text to be encrypted.

I use the following python script as a webserver:

#!/usr/bin/env python

import sys
import SimpleHTTPServer
import BaseHTTPServer

class ServerHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

    def do_GET(self):
        print (self.headers)
        SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

    def do_POST(self):
        # print post req, don't care about serving it
        print (self.headers)
        

def test(HandlerClass=ServerHandler,
         ServerClass=BaseHTTPServer.HTTPServer):

    protocol = "HTTP/1.0"
    host = '127.0.0.1'
    port = 8000
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        if ':' in arg:
            host, port = arg.split(':')
            port = int(port)
        else:
            try:
                port = int(sys.argv[1])
            except:
                host = sys.argv[1]

    server_address = (host, port)

    HandlerClass.protocol_version = protocol
    httpd = ServerClass(server_address, HandlerClass)

    sa = httpd.socket.getsockname()
    print "Serving HTTP on", sa[0], "port", sa[1], "..."
    httpd.serve_forever()


if __name__ == "__main__":
    test()

3 - Using a javascript debugger, like firebug, inspect the javascript code embedded in the html page.

4 - Fix the javascript in doIt() function, does not work for me, change following lines:

x = document.Crypto.key1.value;
if (x.length > 300) {
msg = document.Crypto.plaintext.value;

From then on, you should be able to encrypt text and see ciphertext in firebug's console.  xmlhttp.open() may fail but it is not necessary to solve this challenge

5 - Place breakpoints in function doIt() in such a way that you will get the value of x, y and CT variable.  Run doIt() several times with different keys & plaintext.

6 - You should notice than y, which is the result of expandkey(x) is never longer than 4 caracters, no matter the lenght of the key you submitted. In fact, it look like a base64 encoded string of a single caracter.  Have a look at expandkey()

7 - If you look at the line:
b64Token = btoa(c[i]) + b64token;
you will notice a discrepancy in the case for the variable named b64Token.
Since the case doesn't match, javascript will treat them as 2 distinct variable, therefore concatenation never happens.  That is the crux: The return value is always a single caracter encoded in base64 and then it is used as input in pbdkf2 to get an encryption key.  So, expandkey() reduces keyspace to 256 possible combinaisons, something that we should be able to bruteforce.


8 - Prepare decryption function using doIt() function as template, named mine usetheforcebrute().

function usetheforcebrute() {
  x = document.Crypto.key1.value;
  y = expandkey(x);
  pbkdf2 = new PBKDF2(y, "NaCl", 1000, 16)
  msg = document.Crypto.plaintext.value;
  CT = GibberishAES.dec(msg,pbkdf2);
  alert(CT);
}

Add a button to call it:
<input type='button' value='droptheflag' onclick='usetheforcebrute()' />

9 - Get ciphertext from pcap2.pcap (the post request), paste in text area, enter any key, click drop the flag.

10 - We got the flag:

Hello Comrade! In Auskev, flags finds you! 987ytgfcxzasazxcvhnbvcderfdesazxcvzsde just found you!
