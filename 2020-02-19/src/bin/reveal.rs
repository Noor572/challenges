use base64;
use std::fs::File;
use std::io::prelude::*;

// FLAG: FLAG-vpsffrUV4OwpIqAR0j1HnwPelag0uL8C
// KEY: [16, 78, 75, 52, 16, 92, 2, 68, 33, 109, 125, 27, 24, 75, 121, 32, 20, 79, 97, 38, 38, 22, 113, 60, 33, 112, 117, 37, 15, 98, 92, 14, 17, 98, 6, 69, 23, 98, 101, 5, 27, 114, 80, 1, 38, 112, 68, 66, 19, 82, 14, 75]
const KEY: [u8; 500] = [
    0x85, 0xd4, 0x6f, 0x31, 0xbc, 0xd8, 0xe8, 0xe7, 0x3d, 0x3d, 0x5f, 0xcf, 0x11, 0xd5, 0x43, 0xa1,
    0x19, 0x55, 0xb0, 0xfe, 0xac, 0xb7, 0x21, 0x2c, 0xf1, 0xb2, 0x19, 0x28, 0xea, 0x22, 0x55, 0x43,
    0x1d, 0x7a, 0x1d, 0xd4, 0x5b, 0x9c, 0xac, 0x05, 0x9e, 0xd5, 0x79, 0xa4, 0x3d, 0x32, 0xb5, 0xe0,
    0x27, 0xf7, 0x10, 0x4e, 0x4b, 0x34, 0x10, 0x5c, 0x02, 0x44, 0x21, 0x6d, 0x7d, 0x1b, 0x18, 0x4b,
    0x79, 0x20, 0x14, 0x4f, 0x61, 0x26, 0x26, 0x16, 0x71, 0x3c, 0x21, 0x70, 0x75, 0x25, 0x0f, 0x62,
    0x5c, 0x0e, 0x11, 0x62, 0x06, 0x45, 0x17, 0x62, 0x65, 0x05, 0x1b, 0x72, 0x50, 0x01, 0x26, 0x70,
    0x44, 0x42, 0x13, 0x52, 0x0e, 0x4b, 0xc3, 0xa6, 0x11, 0x99, 0x94, 0x3c, 0x2c, 0x15, 0x60, 0xf2,
    0x90, 0x72, 0x95, 0xd3, 0xb3, 0x7d, 0x8a, 0xc3, 0xf2, 0xb3, 0x63, 0x7b, 0xfa, 0x08, 0xa7, 0x54,
    0x19, 0x21, 0xd1, 0x91, 0xa5, 0xbf, 0xc3, 0x92, 0xfa, 0x9f, 0x55, 0xbf, 0x1e, 0x07, 0x41, 0x2c,
    0xbb, 0xe8, 0x91, 0x9d, 0xed, 0x56, 0xb5, 0x4b, 0xab, 0xbb, 0xa8, 0xcf, 0xdd, 0xd0, 0x09, 0x6a,
    0x5f, 0xee, 0x02, 0xa1, 0xc4, 0xaf, 0xe5, 0xd1, 0xb5, 0x65, 0x84, 0xe3, 0x83, 0xb4, 0x8c, 0x98,
    0xce, 0xeb, 0x63, 0x96, 0x1a, 0xb4, 0x51, 0xe3, 0x65, 0x94, 0xe4, 0x19, 0x17, 0x79, 0x8b, 0xb6,
    0x52, 0x90, 0xe0, 0x3e, 0x4a, 0x8f, 0x6f, 0x80, 0x9a, 0x6b, 0x8e, 0xb4, 0xdc, 0x85, 0x02, 0x7b,
    0x77, 0xf1, 0xd7, 0xf8, 0xfa, 0x78, 0x95, 0xba, 0x03, 0x9a, 0x56, 0xb2, 0x1b, 0x0d, 0xb8, 0x85,
    0x81, 0xfa, 0x15, 0xbf, 0x03, 0xa7, 0xce, 0x20, 0xed, 0x51, 0x6e, 0x3d, 0xb0, 0x09, 0x8e, 0xfe,
    0x11, 0xbc, 0x63, 0x70, 0x19, 0x7f, 0x6f, 0xc1, 0xe3, 0xe8, 0x6d, 0x8d, 0x03, 0x1b, 0xfd, 0x92,
    0x9e, 0x1f, 0x73, 0xf4, 0x57, 0x83, 0x63, 0xe8, 0xcc, 0x87, 0x0f, 0x80, 0x45, 0x36, 0x38, 0x24,
    0xef, 0xca, 0xfe, 0x74, 0xb6, 0x71, 0x29, 0xac, 0xb1, 0xd6, 0x6c, 0xc2, 0x29, 0x30, 0x12, 0xf1,
    0xa8, 0x21, 0x66, 0x8a, 0x95, 0xc1, 0x14, 0x55, 0xe5, 0x43, 0x47, 0x33, 0x39, 0xef, 0xe2, 0x16,
    0x68, 0x5d, 0xb3, 0x85, 0xa4, 0xfc, 0xd2, 0x1b, 0x1b, 0x84, 0x97, 0xea, 0xe0, 0xe3, 0xf9, 0x0b,
    0x78, 0x64, 0xd6, 0x04, 0x72, 0x43, 0xbf, 0xfa, 0x37, 0x8c, 0xae, 0x39, 0x37, 0xf2, 0x69, 0xe4,
    0x9a, 0x19, 0xa6, 0x73, 0x55, 0x43, 0x04, 0x00, 0xa0, 0x1b, 0x1b, 0x6f, 0x5d, 0x7e, 0x51, 0x01,
    0x9d, 0xc6, 0xb5, 0xae, 0x96, 0x5f, 0x81, 0xa6, 0x6b, 0x09, 0x99, 0x2f, 0xc3, 0x3e, 0x75, 0xb1,
    0xf7, 0xe7, 0xc1, 0x45, 0x9c, 0xd1, 0x87, 0x1c, 0x95, 0x4b, 0xa6, 0x61, 0x12, 0x84, 0x3d, 0xdc,
    0xac, 0xd8, 0xb6, 0xa0, 0x27, 0x11, 0xc5, 0xc3, 0xbf, 0x0e, 0x65, 0xde, 0x1e, 0x25, 0xa5, 0x1c,
    0xc7, 0x8e, 0xb1, 0x29, 0xaf, 0xd4, 0x2a, 0x20, 0xcd, 0xa2, 0xbd, 0x04, 0xb3, 0xc5, 0x0e, 0x5a,
    0x7b, 0x81, 0x0f, 0xc2, 0xdb, 0x40, 0x38, 0x8a, 0x3c, 0x83, 0xde, 0x81, 0xb8, 0x51, 0x02, 0x1e,
    0x8c, 0x84, 0x39, 0x4c, 0x9f, 0xb5, 0xd7, 0x28, 0x6b, 0xfd, 0x04, 0xfe, 0xe6, 0x97, 0x85, 0x86,
    0x78, 0xc6, 0xbf, 0x11, 0xea, 0x20, 0xc1, 0xf4, 0x2b, 0x9d, 0xd5, 0x31, 0x37, 0x0e, 0xc7, 0xca,
    0xc8, 0x8a, 0xc5, 0x82, 0x76, 0x8b, 0x93, 0xb3, 0x7e, 0xe9, 0x97, 0x87, 0xbc, 0x78, 0xd5, 0x1e,
    0x00, 0x18, 0xee, 0xa6, 0x41, 0x9d, 0xf8, 0x0e, 0x23, 0x9a, 0x84, 0x89, 0xe2, 0x0c, 0x1a, 0xd3,
    0x62, 0x24, 0xe5, 0xee,
];

// Allow any error types
pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

pub fn main() -> Result<()> {
    // Read the secret file from disk.
    let mut file = File::open("uVh32NpQz")?;
    let mut buf = Vec::new();
    file.read_to_end(&mut buf)?;

    if buf.len() != (4 + 37) {
        eprintln!("Invalid length!");
        return Ok(());
    }

    let key = &buf[0..4]; // We have a known plaintext here: "FLAG-"
    let data = base64::encode(&buf[4..]);

    // Convert the base64 data into a byte string for comparison
    let xored: Vec<u8> = data
        .into_bytes()
        .iter()
        .zip(key.iter().cycle())
        .map(|(d, k)| d ^ k)
        .collect();

    // Compare with our secret key.
    let check = xored
        .iter()
        .zip(&KEY[50..102])
        .map(|(lhs, rhs)| lhs ^ rhs)
        .all(|x| x == 0);

    match check {
        true => println!("Good job!"),
        false => println!("No."),
    };

    Ok(())
}

// $ echo -n "FLAG-" | base64
// RkxBRy0=
